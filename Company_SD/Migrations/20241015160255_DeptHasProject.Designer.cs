// <auto-generated />
using System;
using Company_SD.Db_Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Company_SD.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20241015160255_DeptHasProject")]
    partial class DeptHasProject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Company_SD.Entities.Department", b =>
                {
                    b.Property<int>("DNum")
                        .HasColumnType("int");

                    b.Property<string>("DName")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("MrgSSN")
                        .HasColumnType("int");

                    b.Property<DateTime?>("hireDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DNum");

                    b.HasIndex("MrgSSN")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Company_SD.Entities.Employee", b =>
                {
                    b.Property<int>("SSN")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DBDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DNo")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LName")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("SSN");

                    b.HasIndex("DNo");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Company_SD.Entities.Location", b =>
                {
                    b.Property<int>("DNum")
                        .HasColumnType("int");

                    b.Property<string>("Loc")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("DNum", "Loc");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Company_SD.Entities.Project", b =>
                {
                    b.Property<int>("PNum")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("DNum")
                        .HasColumnType("int");

                    b.Property<string>("Loc")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PName")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("PNum");

                    b.HasIndex("DNum");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Company_SD.Entities.Department", b =>
                {
                    b.HasOne("Company_SD.Entities.Employee", "OtherEmployees")
                        .WithOne("OtherDepartments")
                        .HasForeignKey("Company_SD.Entities.Department", "MrgSSN")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OtherEmployees");
                });

            modelBuilder.Entity("Company_SD.Entities.Employee", b =>
                {
                    b.HasOne("Company_SD.Entities.Department", "Departments")
                        .WithMany("Employees")
                        .HasForeignKey("DNo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Company_SD.Entities.Location", b =>
                {
                    b.HasOne("Company_SD.Entities.Department", "Departments")
                        .WithMany("Locations")
                        .HasForeignKey("DNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Company_SD.Entities.Project", b =>
                {
                    b.HasOne("Company_SD.Entities.Department", "Departments")
                        .WithMany("Projects")
                        .HasForeignKey("DNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Company_SD.Entities.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Locations");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Company_SD.Entities.Employee", b =>
                {
                    b.Navigation("OtherDepartments")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
